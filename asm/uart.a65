;===============================================================================
;Copyright (C) 2018 Ryan Clarke
;
;This program is free software (firmware): you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;===============================================================================

;===============================================================================
; Program   : v65C02 BIOS
; File Name : uart.a65
; Project   : v65C02 8-bit Computer
; Author    : Ryan Clarke
; E-mail    : kj6msg@icloud.com
;===============================================================================
; Purpose : UART routines for the v65C02 BIOS.
;===============================================================================


.PC02

.INCLUDE    "memory.inc"
.INCLUDE    "uart.inc"

.EXPORT     uart_getc
.EXPORT     uart_putc
.EXPORT     uart_puts


;=UART GET CHARACTER ===========================================================
; Gets a byte from the UART. Blocking, will wait indefinitely.
;
; Parameters: none
; Returns:    A = character
;
; Cycles (jsr->rts): 24 (assumes character ready)

.CODE

uart_getc:  lda     UART_STATUS     ; read UART STATUS register
            bit     #RXFULL         ; test RXFULL flag
            beq     uart_getc       ; RXFULL == 0?
            
            lda     UART_RXREG      ; read character
            
            rts


;= UART PRINT CHARACTER ========================================================
; Sends a byte to the UART.
;
; Parameters: A = character
; Returns:    none
;
; Cycles (jsr->rts): 30 (assumes not busy)

.CODE

uart_putc:  pha                     ; save character
            
@poll:      lda     UART_STATUS     ; read UART STATUS register
            bit     #TXBUSY         ; test TXBUSY flag
            bne     @poll           ; TXBUSY == 1?
            
            pla                     ; restore character
            sta     UART_TXREG      ; send it to UART
            
            rts


;= UART PRINT STRING ===========================================================
; Sends a NULL terminated string to the UART.
;
; Parameters: X = &string<15:8>
;             A = &string<7:0>
; Returns:    none
;
; Destroys:   Y, $00, $01
;
; Cycles (jsr->rts): 29 + (31 * string length) [doesn't factor polling time]

.CODE

uart_puts:  stx     $01
            sta     $00             ; ($00) = string address
            
            ldy     #0              ; Y = character counter
            
@loop:      lda     ($00), Y        ; A = string character
            beq     @done           ; character = NUL?
            
            pha                     ; save character
            
@poll:      lda     UART_STATUS     ; read UART STATUS register
            bit     #TXBUSY         ; test the TXBUSY flag
            bne     @poll           ; TXBUSY == 1?
            
            pla                     ; pull character to print
            sta     UART_TXREG      ; write character to UART
            
            iny                     ; next character
            bra     @loop           ; keep getting characters
            
@done:      rts
