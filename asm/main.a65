;===============================================================================
;Copyright (C) 2018 Ryan Clarke
;
;This program is free software (firmware): you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;===============================================================================


;===============================================================================
; Program   : v65C02 BIOS
; File Name : main.a65
; Project   : v65C02 8-bit Computer
; Author    : Ryan Clarke
; E-mail    : kj6msg@icloud.com
;===============================================================================
; Release History :
;
;    Version     | Date          | Description
;    -------------------------------------------------
;    0.0         | 07/26/2018    | Initial development
;===============================================================================
; Purpose : Main program for the 65C02 BIOS.
;===============================================================================


.PC02

.INCLUDE    "conio.inc"
.INCLUDE    "memory.inc"
.INCLUDE    "uart.inc"

.IMPORT     gotoxy
.IMPORT     monitor
.IMPORT     puts
.IMPORT     uart_getc
.IMPORT     u16tod
.IMPORT     vga_init

.EXPORT     start

.DEFINE     VERSION "0.0"


;= BIOS ENTRY POINT ============================================================
; Verify RAM is installed. If not, display an error message and halt. Otherwise,
; continue to the main program.

.CODE

start:      lda     #$AA                ; verify RAM by checking zero page
            sta     $FF                 ; store $AA to $00FF
            lda     $FF                 ; read $00FF
            cmp     #$AA                ; compare with $AA
            bne     @no_ram             ; $00FF != $AA?
            
            pha                         ; now check the stack by pushing $AA
            pla                         ; pull the pushed value
            cmp     #$AA                ; compare with $AA
            beq     main                ; pushed/pulled == $AA?
            
@no_ram:    lda     #$C0                ; display error code on SSEG display
            sta     SSEG_BYTE3
            lda     #$DE
            sta     SSEG_BYTE2
            stz     SSEG_BYTE0
            lda     #$F3
            sta     SSEG_DIGITS         ; display "C0DE 00" on SSEG
            
@halt:      bra     @halt               ; halt, we can't do anything without RAM
            
            
;= BIOS MAIN PROGRAM ===========================================================

.CODE

main:       cli                         ; enable interrupts
            
            jsr     vga_init            ; initialize the VGA
            
            lda     #.HIBYTE(B115200)
            sta     UART_BRGH
            lda     #.LOBYTE(B115200)
            sta     UART_BRGL           ; Initialize UART to 115200 baud
            
            ldx     #.HIBYTE(bios_ver)
            lda     #.LOBYTE(bios_ver)
            jsr     puts                ; BIOS header
            
            ldx     #0
            lda     #1
            jsr     gotoxy              ; move cursor to (0,1)
            
            ldx     #.HIBYTE(copyright)
            lda     #.LOBYTE(copyright)
            jsr     puts                ; copyright
            
            ldx     #0
            lda     #3
            jsr     gotoxy              ; move cursor to (0,3)
            
            ldx     #.HIBYTE(ram)
            lda     #.LOBYTE(ram)
            jsr     puts                ; RAM message
            
            jsr     ram_count           ; returns number of RAM pages
            tax                         ; convert pages to bytes
            lda     #$00
            jsr     u16tod              ; convert RAM total to decimal string
            jsr     puts                ; print RAM total
            
            ldx     #.HIBYTE(bytes)
            lda     #.LOBYTE(bytes)
            jsr     puts                ; bytes string
            
            ldx     #0
            lda     #4
            jsr     gotoxy              ; move cursor to (0,4)
            
            ldx     #.HIBYTE(uart)
            lda     #.LOBYTE(uart)
            jsr     puts                ; UART string
            
            ldx     #0
            lda     #6
            jsr     gotoxy              ; move cursor to (0,6)
            
            ldx     #.HIBYTE(ready)
            lda     #.LOBYTE(ready)
            jsr     puts                ; print ready message
            
            ;jsr     monitor            ; ROM monitor program
            
            lda     #$03
            sta     SSEG_DIGITS         ; turn on digit 0 and 1
            
@keyb:      lda     KBD_STATUS
            bit     $01                 ; test DATA_RDY
            beq     @keyb               ; keep polling
            
            lda     KBD_SCANCODE        
            sta     SSEG_BYTE0          ; send the scan code to the SSEG
            bra     @keyb
            
@idle:      bra     @idle               ; idle


;= RAM COUNT ===================================================================
; Counts the total pages of RAM available. Assumes zero page and stack confirmed
;
; Parameters: none
; Returns:    A = total RAM pages
;
; Cycles (jsr->rts): 3426 for 32KB

.CODE

ram_count:  lda     #$02                ; start at $02FF
            sta     $01
            lda     #$FF
            sta     $00                 ; ($00) = current page to test
            
@loop:      lda     #$AA
            sta     ($00)               ; store $AA at ($00)
            lda     ($00)               ; read ($00)
            cmp     #$AA                ; compare with $AA
            bne     @total              ; ($00) != $AA?
            
            inc     $01                 ; increment the page to be tested
            lda     $01                 ; load the page count
            cmp     #.HIBYTE(VRAM)      ; VRAM starts at RAM end
            bne     @loop               ; page count != VRAM start?
            
@total:     lda     $01                 ; A = page count
            
            rts


;= READ ONLY DATA ==============================================================

.RODATA

bios_ver:   .ASCIIZ "v65C02 BIOS v", VERSION
copyright:  .ASCIIZ "Copyright (C) 2018 Ryan Clarke"
ram:        .ASCIIZ "RAM: "
bytes:      .ASCIIZ " bytes"
uart:       .ASCIIZ "UART: 115200 bps / 8-N-1"
ready:      .ASCIIZ "Ready."
