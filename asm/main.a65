;===============================================================================
;Copyright (C) 2018 Ryan Clarke
;
;This program is free software (firmware): you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;===============================================================================

;===============================================================================
; Program   : v65C02 BIOS
; File Name : main.a65
; Project   : v65C02 8-bit Computer
; Author    : Ryan Clarke
; E-mail    : kj6msg@icloud.com
;===============================================================================
; Purpose : Main program for the v65C02 BIOS.
;===============================================================================


.PC02

.INCLUDE    "conio.inc"
.INCLUDE    "memory.inc"
.INCLUDE    "uart.inc"

.IMPORT     clrscr
.IMPORT     cputs
.IMPORT     gotoxy
.IMPORT     keymap
.IMPORT     monitor
.IMPORT     u16tod

.EXPORT     start


;= CONSTANTS ===================================================================

.DEFINE     VERSION "0.1.0"

EN = %00000001                          ; EN bit of VGA STATUS register


;= BIOS ENTRY POINT ============================================================
; Verify RAM is installed. If not, display an error message and halt. Otherwise,
; continue to the main program.

.CODE

            ; zero page check
start:      lda     #$AA                ; verify RAM by checking zero page
            sta     $FF                 ; store $AA to $00FF
            lda     $FF                 ; read $00FF
            cmp     #$AA                ; compare with $AA
            bne     @no_ram             ; $00FF != $AA?
            
            ; stack check
            pha                         ; now check the stack by pushing $AA
            pla                         ; pull the pushed value
            cmp     #$AA                ; compare with $AA
            beq     main                ; pushed/pulled == $AA?
            
            ; no RAM installed
@no_ram:    lda     #$C0                ; display error code on SSEG display
            sta     SSEG_BYTE3
            lda     #$DE
            sta     SSEG_BYTE2
            stz     SSEG_BYTE0
            lda     #%11110011          ; Bytes 0, 2, and 3 turned on
            sta     SSEG_DIGITS         ; display "C0DE 00" on SSEG
            
@halt:      bra     @halt               ; halt, we can't do anything without RAM
            
            
;= BIOS MAIN PROGRAM ===========================================================

.CODE

main:       cli                         ; enable interrupts
            
            ; VGA initialization
            stz     VGA_STATUS          ; disable VGA and cursor
            jsr     clrscr              ; clear the screen
            lda     #EN                 ; VGA enabled, cursor disabled
            sta     VGA_STATUS          ; write new status register
            
            ; UART initialization
            lda     #.HIBYTE(B115200)
            sta     UART_BRGH
            lda     #.LOBYTE(B115200)
            sta     UART_BRGL           ; Initialize UART to 115200 baud
            
            ldx     #.HIBYTE(bios_ver)
            lda     #.LOBYTE(bios_ver)
            jsr     cputs                ; BIOS header
            
            ldx     #0
            lda     #1
            jsr     gotoxy              ; move cursor to (0,1)
            
            ldx     #.HIBYTE(copyright)
            lda     #.LOBYTE(copyright)
            jsr     cputs                ; copyright
            
            ldx     #0
            lda     #3
            jsr     gotoxy              ; move cursor to (0,3)
            
            ldx     #.HIBYTE(ram)
            lda     #.LOBYTE(ram)
            jsr     cputs                ; RAM message
            
            ; compute total RAM installed
            lda     #$02                ; start at $02FF
            sta     $01                 ; current RAM page
            lda     #$FF                ; RAM offset
            sta     $00                 ; ($0000) = current page to test
            
@loop:      lda     #$AA
            sta     ($00)               ; store $AA at ($0000)
            lda     ($00)               ; read ($0000)
            cmp     #$AA                ; compare with $AA
            bne     @total              ; ($0000) != $AA? total
            
            inc     $01                 ; increment the page to be tested
            lda     $01                 ; load the page count
            cmp     #.HIBYTE(VRAM)      ; VRAM starts at RAM end
            bne     @loop               ; page count != VRAM start? loop
            
@total:     ldx     $01                 ; convert pages to bytes
            lda     #$00                ; X,A = total bytes
            jsr     u16tod              ; convert RAM total to decimal string
            jsr     cputs               ; print RAM total
            
            ldx     #.HIBYTE(bytes)
            lda     #.LOBYTE(bytes)
            jsr     cputs               ; bytes string
            
            ldx     #0
            lda     #4
            jsr     gotoxy              ; move cursor to (0,4)
            
            ldx     #.HIBYTE(uart)
            lda     #.LOBYTE(uart)
            jsr     cputs               ; UART setting string
            
            ldx     #0
            lda     #6
            jsr     gotoxy              ; move cursor to (0,6)
            
            ldx     #.HIBYTE(ready)
            lda     #.LOBYTE(ready)
            jsr     cputs               ; print ready message
            
            ldx     #0
            lda     #7
            jsr     gotoxy              ; move cursor to (0,7)
            
            lda     KBD_SCANCODE        ; clear the keyboard buffer            
            
            jmp     monitor             ; ROM monitor program


;= READ ONLY DATA ==============================================================

.RODATA

bios_ver:   .ASCIIZ "v65C02 BIOS v", VERSION
copyright:  .ASCIIZ "Copyright (C) 2018 Ryan Clarke"
ram:        .ASCIIZ "RAM: "
bytes:      .ASCIIZ " bytes"
uart:       .ASCIIZ "UART: 115200 bps / 8-N-1"
ready:      .ASCIIZ "Ready."
