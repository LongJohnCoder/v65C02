;===============================================================================
;Copyright (C) 2018 Ryan Clarke
;
;This program is free software (firmware): you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;===============================================================================


;===============================================================================
; Program   : BIOS
; File Name : conio.a65
; Project   : v65C02 8-bit Computer
; Author    : Ryan Clarke
; E-mail    : kj6msg@icloud.com
;===============================================================================
; Release History :
;
;    Version     | Date          | Description
;    -------------------------------------------------
;    0.0         | 08/07/2018    | Initial development
;===============================================================================
; Purpose : Console I/O routines for the v65C02 BIOS.
;===============================================================================


.PC02

.INCLUDE    "memory.inc"

.EXPORT     cursor_off
.EXPORT     cursor_on
.EXPORT     gotoxy
.EXPORT     puts


;= CONSTANTS ===================================================================

CURS = $02


;= SEGMENT =====================================================================

.SEGMENT "bios"


;= DISABLE CURSOR ==============================================================
; Turns the cursor off by setting the CURS bit of the STATUS register to 0.
; Parameters: none
; Returns:    none

cursor_off: lda     VGA_STATUS          ; load the VGA STATUS register
            and     #.LOBYTE(~CURS)     ; CURS bit of STATUS off
            sta     VGA_STATUS          ; write the VGA STATUS register
            
            rts


;= ENABLE CURSOR ===============================================================
; Turns the cursor on by setting the CURS bit of the STATUS register to 1.
; Parameters: none
; Returns:    none

cursor_on:  lda     VGA_STATUS          ; load the VGA STATUS register
            ora     #CURS               ; CURS bit of STATUS on
            sta     VGA_STATUS          ; write the VGA STATUS register
            
            rts


;= MOVE CURSOR =================================================================
; Moves the cursor to a screen position.
; Parameters: X = column
;             Y = row
; Returns:    none

gotoxy:     stx     $00
            stz     $01                 ; $01:$00 = column
            
            sty     $02
            stz     $03                 ; $03:$02 = row
            
            asl     $02
            asl     $02
            asl     $02
            asl     $02
            rol     $03                 ; $03:$02 = row << 4
            
            lda     $00
            clc
            adc     $02
            sta     $00
            lda     $01
            adc     $03
            sta     $01                 ; $01:$00 = column + (row << 4)
            
            asl     $02
            rol     $03
            asl     $02
            rol     $03                 ; $03:$02 = row << 6
            
            lda     $00
            clc
            adc     $02
            sta     $00
            lda     $01
            adc     $03                 ; $01:$00 = column + (row << 4)
            sta     $01                 ;                  + (row << 6)
            
            lda     $00
            sta     VGA_CURS_LSB
            lda     $01
            sta     VGA_CURS_MSB        ; adjust cursor address
            
            rts


;= PRINT NULL-TERMINATED STRING ================================================
; Prints a NULL terminated string to the screen.
; Parameters: A = LSB of string address
;             X = MSB of string address
; Returns:    none

puts:       sta     $00                 ; pull string address from X:A
            stx     $01                 ; $0001:0000 = string address
            
            ldx     #$00                ; clear X and Y
            ldy     #$00
            
@loop:      lda     ($00), Y            ; retrieve character from string
            beq     @done               ; NUL? yes, then done
        
            sta     VRAM, X             ; write character to VRAM
        
            iny                         ; next character
            inx                         ; increment VRAM twice to skip over
            inx                         ;   the attribute
        
            bra     @loop
            
@done:      rts
