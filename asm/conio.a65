;===============================================================================
;Copyright (C) 2018 Ryan Clarke
;
;This program is free software (firmware): you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;===============================================================================

;===============================================================================
; Program   : v65C02 BIOS
; File Name : conio.a65
; Project   : v65C02 8-bit Computer
; Author    : Ryan Clarke
; E-mail    : kj6msg@icloud.com
;===============================================================================
; Purpose : Console input/output routines for the v65C02 8-bit Computer.
;===============================================================================


.PC02

.INCLUDE    "ascii.inc"
.INCLUDE    "colors.inc"
.INCLUDE    "conio.inc"
.INCLUDE    "memory.inc"

.EXPORT     clrln
.EXPORT     clrscr
.EXPORT     cputs
.EXPORT     gotoxy
.EXPORT     putch


;= CONSTANTS ===================================================================

ATTRIB   = (BLACK << 4) | LIGHT_GRAY


;= CLEAR LINE --================================================================
; Clear a line with NUL characters and light gray on black text attribute.
;
; Parameters: A = line number
; Returns:    none
;
; Destroys: $00, $01
;
; Cycles (jsr->rts): 4549

.CODE

clrln:      ldx     #0
            jsr     gotoxy              ; set cursor to (0,A)
            
            lda     VGA_CURSH
            sta     $01
            lda     VGA_CURSL
            sta     $00                 ; ($0000) = 11-bit cursor address
            
            asl     $00                 ; 12-bit VRAM addr = cursor addr << 1
            rol     $01                 ; A = $0001 << 1
            lda     $01
            ora     #.HIBYTE(VRAM)      ; create 16-bit memory address
            sta     $01                 ; ($00) = 16-bit VRAM address
            
            ldx     #80                 ; X = column counter
@loop:      lda     #NUL                ; A = NUL character
            sta     ($00)               ; store NUL to VRAM

            lda     #$01
            clc
            adc     $00
            sta     $00
            lda     $01
            adc     #$00
            sta     $01                 ; ($00) + $0001

            lda     #ATTRIB             ; A = attribute
            sta     ($00)               ; store attribute to VRAM
            
            lda     #$01
            clc
            adc     $00
            sta     $00
            lda     $01
            adc     #$00
            sta     $01                 ; ($00) + $0001
            
            dex
            bne     @loop
            
            rts


;= CLEAR SCREEN ================================================================
; Clear the screen with NUL characters and light gray on black text attribute.
;
; Parameters: none
; Returns:    none
;
; Destroys: $00, 01
;
; Cycles (jsr->rts): 110783

.CODE

clrscr:     lda     #.HIBYTE(VRAM)
            sta     $01
            lda     #.LOBYTE(VRAM)
            sta     $00                 ; ($0000) = VRAM address
            
@loop:      lda     #NUL                ; A = NUL character
            sta     ($00)               ; store NUL to VRAM
            inc     $00                 ; increment VRAM address LSB
            lda     #ATTRIB             ; A = attribute
            sta     ($00)               ; store attribute to VRAM
            inc     $00                 ; increment VRAM address LSB
            bne     @loop               ; $0000 > 0? loop
            
            inc     $01                 ; increment VRAM address MSB
            lda     $01                 ; A = VRAM address MSB
            cmp     #.HIBYTE(VRAM_END)  ; compare VRAM addr w/ VRAM end (MSBs)
            bne     @loop               ; VRAM address MSB < end? loop
            
            stz     VGA_CURSH
            stz     VGA_CURSL           ; set cursor to (0,0)
            stz     COL
            stz     ROW                 ; update stored cursor coordinates
            
            rts


;= PRINT NULL-TERMINATED STRING ================================================
; Prints a NUL terminated string to the screen. Updates the cursor position
; after printing.
;
; Parameters: X = &string<15:8>
;             A = &string<7:0>
; Returns:    none
;
; Destroys: Y, $02, $03
;
; Cycles (jsr->rts): 48 - [205 * strlen + 8]

.CODE

cputs:      stx     $05
            sta     $04                 ; ($0004) = string address
            
            cursor_off                  ; turn cursor off
            
            ldy     #0                  ; Y = string index
@loop:      lda     ($04), Y            ; A = string character
            beq     @done               ; character == NUL? done
            
            jsr     putch
            iny                         ; index++
            bra     @loop               ; next character
            
@done:      cursor_on                   ; turn cursor on
            
            rts


;= MOVE CURSOR =================================================================
; Moves the cursor to a screen position.
;
; Parameters: X = column
;             A = row
; Returns:    none
;
; Destroys: $00, $01, $02
;
; Cycles (jsr->rts): 102

.CODE

gotoxy:     cpx     #80
            bcs     @done               ; column >= 80? done
            cmp     #25
            bcs     @done               ; row >= 25? done
            
            stx     COL
            sta     ROW                 ; update stored cursor coordinates
            
            stx     $00
            stz     $01                 ; $0000 = column (16-bit)
            stz     $02                 ; $0002,A = row (16-bit)
            
            asl     A
            asl     A
            asl     A
            asl     A                   ; don't have to carry until 4th shift
            rol     $02                 ; $0002,A = row << 4
            pha                         ; push A
            
            adc     $00                 ; carry already cleared
            sta     $00
            lda     $01
            adc     $02
            sta     $01                 ; $0000 = column + (row << 4)
            
            pla                         ; $0002,A = row << 4
            asl     A
            rol     $02
            asl     A
            rol     $02                 ; $0002,A = row << 6
            
            ; VGA cursor address = column + (row << 4) + (row << 6)
            ; $0000 = column + (row << 4)
            ; $0002,A = row << 6
            clc
            adc     $00
            sta     VGA_CURSL
            lda     $01
            adc     $02
            sta     VGA_CURSH
            
@done:      rts


;= PRINT CHARACTER =============================================================
; Prints a character to the screen. Updates the cursor position after printing.
;
; Parameters: A = character
; Returns:    none
;
; Destroys: X, $00, $01
;
; Cycles (jsr->rts): 63-193

.CODE

putch:      pha                         ; push character to the stack
            
            lda     VGA_CURSH
            sta     $01
            lda     VGA_CURSL
            sta     $00                 ; ($0000) = 11-bit cursor address
            
            asl     $00                 ; 12-bit VRAM addr = cursor addr << 1
            rol     $01                 ; A = $0001 << 1
            lda     $01
            ora     #.HIBYTE(VRAM)      ; create 16-bit memory address
            sta     $01                 ; ($00) = 16-bit VRAM address
            
            pla                         ; pull character from the stack
            cmp     #LF
            beq     @newline            ; character == LF? newline
            cmp     #TAB
            beq     @tab                ; character == TAB? tab
            
@printable: sta     ($00)               ; write the character to VRAM
            
            ldx     COL                 ; X = current column
            cpx     #79
            beq     @newline            ; column == 79? newline

            inx                         ; column++
            lda     ROW                 ; A = current row
            bra     @cursor             ; update cursor position
            
@tab:       lda     COL                 ; A = column
            cmp     #72
            bcs     @newline            ; column >= 72
            
            and     #%00000111          ; A = column % 8
            sta     $00                 ; save value into $0000
            lda     #8
            sec
            sbc     $00                 ; A = 8 - (column % 8)
            clc
            adc     COL                 ; add to column
            tax                         ; X = column
            lda     ROW                 ; A = row
            bra     @cursor             ; update cursor
            
@newline:   lda     ROW
            cmp     #24
            beq     @done               ; row == 24? done
            
            ldx     #0                  ; column = 0
            inc     A                   ; row++
@cursor:    jsr     gotoxy              ; update cursor position
            
@done:      rts
