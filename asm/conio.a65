;===============================================================================
;Copyright (C) 2018 Ryan Clarke
;
;This program is free software (firmware): you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;===============================================================================


;===============================================================================
; Program   : v65C02 BIOS
; File Name : conio.a65
; Project   : v65C02 8-bit Computer
; Author    : Ryan Clarke
; E-mail    : kj6msg@icloud.com
;===============================================================================
; Release History :
;
;    Version     | Date          | Description
;    -------------------------------------------------
;    0.0         | 08/07/2018    | Initial development
;===============================================================================
; Purpose : Console I/O routines for the v65C02 BIOS.
;===============================================================================


.PC02

.INCLUDE    "memory.inc"

.EXPORT     gotoxy
.EXPORT     puts


;= MOVE CURSOR =================================================================
; Moves the cursor to a screen position.
;
; Parameters: X = column
;             Y = row
; Returns:    none
;
; Cycles (jsr->rts): 90

.CODE

gotoxy:     stx     $00
            stz     $01                 ; $0000 = column
            
            tya
            stz     $02                 ; $02:A = row
            
            asl     A
            asl     A
            asl     A
            asl     A
            rol     $02                 ; $02:A = row << 4
            
            tax                         ; $02:X = row << 4
            
            clc
            adc     $00
            sta     $00
            lda     $01
            adc     $02
            sta     $01                 ; $0000 = column + (row << 4)
            
            txa                         ; $02:A = row << 4
            
            asl     A
            rol     $02
            asl     A
            rol     $02                 ; $02:A = row << 6
            
            ; VGA cursor address = column + (row << 4) + (row << 6)
            ; $0000 = column + (row << 4)
            ; $02:A = row << 6
            clc
            adc     $00
            sta     VGA_CURS_LSB
            lda     $01
            adc     $02
            sta     VGA_CURS_MSB
            
            rts


;= PRINT NULL-TERMINATED STRING ================================================
; Prints a NUL terminated string to the screen. Updates the cursor position
; after printing.
;
; Parameters: X = MSB of string address
;             Y = LSB of string address
; Returns:    none
;
; Cycles (jsr->rts): 89 + (50 * string length)

.CODE

puts:       lda     VGA_CURS_MSB
            sta     $01
            lda     VGA_CURS_LSB
            sta     $00                 ; $0000 = 11-bit cursor address
            
            asl     $00                 ; 12-bit VRAM addr = cursor address << 1
            rol     $01                 ; $0000 << 1
            lda     #.HIBYTE(VRAM)      ; retrieve VRAM starting page
            ora     $01                 ; generate proper 16-bit address
            sta     $01                 ; ($00) = 16-bit VRAM address
            
            stx     $03
            sty     $02                 ; ($02) = string address
            
            ldy     #$00                ; Y = character counter
            
@loop:      lda     ($02), Y            ; retrieve character from string
            beq     @done               ; character == NUL?
        
            sta     ($00)               ; write character to VRAM
            
            lda     $01                 ; get VRAM address page
            cmp     #$8F                ; compare with $8F
            bne     @next               ; VRAM page != $8F?
            
            lda     $00                 ; get VRAM address LSB
            cmp     #$9E                ; compare with $9E
            beq     @done               ; VRAM address LSB == $9E?
            
@next:      iny                         ; next character
            
            lda     #$02                ; skip over the attribute byte
            clc
            adc     $00                 ; add 2 to VRAM address LSB
            sta     $00                 ; store new LSB
            lda     #$00
            adc     $01                 ; add carry to VRAM page
            sta     $01                 ; $(00) = VRAM addr + 2
            
            bra     @loop               ; keep getting characters
            
@done:      lda     #$0F
            and     $01                 ; generate 12-bit VRAM address
            lsr     $01                 ; 11-bit cursor addr = VRAM address >> 1
            ror     $00                 ; $0000 = new 11-bit cursor address
            
            lda     $01
            sta     VGA_CURS_MSB
            lda     $00
            sta     VGA_CURS_LSB        ; cursor address = $0000
            
            rts
