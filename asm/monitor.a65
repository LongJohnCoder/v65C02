;===============================================================================
;Copyright (C) 2018 Ryan Clarke
;
;This program is free software (firmware): you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;===============================================================================

;===============================================================================
; Program   : v65C02 BIOS
; File Name : monitor.a65
; Project   : v65C02 8-bit Computer
; Author    : Ryan Clarke
; E-mail    : kj6msg@icloud.com
;===============================================================================
; Purpose : Monitor program for the v65C02 BIOS.
;===============================================================================


.PC02

.INCLUDE    "ascii.inc"
.INCLUDE    "conio.inc"
.INCLUDE    "memory.inc"

.IMPORT     clrln
.IMPORT     clrscr
.IMPORT     cputs
.IMPORT     gotoxy
.IMPORT     htou8
.IMPORT     htou16
.IMPORT     keymap
.IMPORT     keymapsh
.IMPORT     putch
.IMPORT     u8toh
.IMPORT     u16itod

.EXPORT     monitor


;= MONITOR PROGRAM =============================================================

.CODE

monitor:    cursor_on                   ; turn cursor on
            
@prompt:    lda     #'>'
            jsr     putch               ; print command prompt
            
            ldx     #0                  ; X = string index
@getline:   lda     KBD_STATUS          ; retrieve keyboard STATUS register
            bit     #%00000001          ; test DATA_RDY
            beq     @getline            ; DATA_RDY == 0? keep polling
            
            lda     KBD_SCANCODE        ; read the scan code
            tay
            lda     KBD_STATUS          ; retrieve keyboard STATUS register
            bit     #%00000110          ; test LSHIFT and RSHIFT
            bne     @shifted
            lda     keymap, Y           ; convert to ASCII
            bra     @isnull
@shifted:   lda     keymapsh, Y
@isnull:    beq     @getline            ; ASCII character == 0? ignore non ASCII
            cmp     #ESC
            beq     @escape             ; escape key? process
            cmp     #TAB
            beq     @getline            ; tab key? process
            cmp     #BS
            beq     @backspace          ; backspace key? process
            
            pha                         ; save the character
            phx                         ; save string index
            jsr     putch               ; print character to screen
            plx                         ; restore string index
            pla                         ; restore the character
            
            cmp     #LF
            beq     @linefeed           ; line feed? process
            
            cpx     #9
            bcs     @getline            ; ignore input if > 9 characters
            
            sta     input, X            ; add character to command string
            inx                         ; next string position
            bra     @getline            ; keep getting characters
            
@escape:    lda     ROW
            jsr     clrln               ; clear current line
            bra     monitor             ; new prompt

@backspace: lda     COL                 ; A = current column
            cmp     #1                  ; check if beginning of prompt
            beq     @getline            ; column == 1? ignore backspace
            
            phx                         ; save the string index
            
            dec     A                   ; decrement column
            tax                         ; X = column--
            lda     ROW                 ; A = current row
            jsr     gotoxy              ; move cursor to (column--, row)
            
            lda     #NUL                ; A = NUL character
            jsr     putch               ; clear the cursor position
            
            ldx     COL                 ; X = current column
            dex                         ; X = column--
            lda     ROW                 ; A = current row
            jsr     gotoxy              ; reset cursor from printed NUL
            
            plx                         ; restore string index
            dex                         ; string index--
            
            bra     @getline            ; keep getting characters

@linefeed:  stz     input, X            ; add NUL terminator

@isempty:   cpx     #0
            beq     monitor             ; empty input string? try again
            
            ; validate input string format
            lda     input+1             ; check 2nd character
            beq     @noparams           ; NUL? no parameters
            cmp     #' '
            bne     invalid             ; Not a space? invalid command
            
            lda     input+6             ; check 7th character
            beq     @single             ; NUL? only one parameter
            cmp     #' '
            bne     invalid             ; Not a space? invalid command
            bra     @double             ; two parameters
            
            ; parse command
@noparams:  lda     input
            cmp     #'c'
            beq     cls                 ; clear screen?
            cmp     #'h'
            beq     help                ; help command?
            cmp     #'r'
            beq     run                 ; run command?
            cmp     #'z'
            beq     zmodem              ; zmodem command?
            bra     invalid             ; invalid command
            
@single:    lda     input
            cmp     #'d'
            beq     dump                ; dump command?
            bra     invalid             ; invalid command
            
@double:    lda     input
            cmp     #'w'
            beq     write               ; write command?
            bra     invalid             ; invalid command
            
invalid:    ldx     #.HIBYTE(input)
            lda     #.LOBYTE(input)
            jsr     cputs               ; print the invalid command
            
            lda     #':'
            jsr     putch
            lda     #' '
            jsr     putch
            
            ldx     #.HIBYTE(inv_msg)
            lda     #.LOBYTE(inv_msg)
            jsr     cputs               ; print the invalid message
            jmp     monitor
            
@idle:      bra     @idle               ; idle


;= CLRSCR ======================================================================

cls:        cursor_off
            jsr     clrscr
            cursor_on
            
            jmp     monitor


;= DUMP ========================================================================

dump:       jsr     memdump             ; dump 16 bytes of memory to screen
            jmp     monitor             ; return to the monitor


;= HELP ========================================================================

help:       ldx     #.HIBYTE(help_msg)
            lda     #.LOBYTE(help_msg)
            jsr     cputs
            
            jmp     monitor


;= RUN =========================================================================

run:        jsr     PROG_RAM
            jmp     monitor


;= WRITE =======================================================================

write:      jsr     memwrite
            jmp     monitor


;= ZMODEM ======================================================================

zmodem:     jmp     monitor


;= MEMORY DUMP =================================================================
; Dump 16 bytes of memory to the screen
;
; Parameters: none
; Returns:    none

memdump:    ldx     #.HIBYTE(input+2)
            lda     #.LOBYTE(input+2)
            jsr     htou16              ; convert hex string to uint16
            stx     $07
            sta     $06                 ; $(06) = start address
            
            ; take a snapshot of the memory
            ldy     #15                 ; Y = offset
@buffer:    lda     ($06), Y            ; A = load memory
            sta     buf, Y              ; store in buffer
            dey                         ; offset--
            bpl     @buffer             ; offset >= 0?
            
            ; print passed memory address
            txa                         ; MSB first
            jsr     u8toh               ; unsigned byte to hex
            jsr     cputs
            lda     $06                 ; LSB next
            jsr     u8toh               ; unsigned byte to hex
            jsr     cputs
            
            lda     #':'
            jsr     putch
            lda     #' '
            jsr     putch
            
            ldy     #0                  ; Y = offset
@bytes:     lda     buf, Y              ; load buffered memory
            jsr     u8toh               ; convert byte to hex
            phy                         ; save Y (cputs destroys it)
            jsr     cputs               ; print hex
            ply                         ; restore Y
            lda     #' '
            jsr     putch               ; print a space
            
            iny                         ; next address
            cpy     #16
            bne     @bytes              ; offset < 16?
            
            lda     #'['                ; start ASCII display
            jsr     putch
            
            ldy     #0                  ; Y = offset
@toascii:   lda     buf, Y              ; load buffered memory
            cmp     #$20                ; SPACE
            bcc     @notascii           ; value < SPACE?
            cmp     #$7F                ; DEL
            bcs     @notascii           ; value >= DEL?
            
            jsr     putch               ; print the ASCII representation
            bra     @next
            
@notascii:  lda     #'.'                ; print a period for unprintables
            jsr     putch
            
@next:      iny                         ; offset++
            cpy     #16
            bne     @toascii            ; offset < 16?
            
            lda     #']'
            jsr     putch               ; end of ASCII display
            
            lda     #LF
            jsr     putch               ; line feed
            
            rts


;= MEMORY WRITE ================================================================
; Write byte to memory.
;
; Parameters: none
; Returns:    none

memwrite:   ldx     #.HIBYTE(input+2)
            lda     #.LOBYTE(input+2)
            jsr     htou16              ; convert address hex string to uint16
            stx     $07
            sta     $06                 ; ($0006) = address
            
            ldx     input+7
            lda     input+8
            jsr     htou8               ; convert value hex string to uint8
            sta     ($06)
            pha                         ; save write value
            
            lda     $07                 ; address MSB
            jsr     u8toh               ; convert address MSB to hex string
            jsr     cputs               ; print address MSB
            lda     $06                 ; address LSB
            jsr     u8toh               ; convert address LSB to hex string
            jsr     cputs               ; print address LSB
            lda     #':'
            jsr     putch
            lda     #' '
            jsr     putch
            
            pla                         ; A = write value
            jsr     u8toh               ; convert write value to hex string
            jsr     cputs               ; print write value
            
            lda     #LF
            jsr     putch               ; line feed
            
            rts


;= STRINGS =====================================================================

.RODATA

inv_msg:    .BYTE "invalid command", LF, 0

help_msg:   .BYTE "clrscr", TAB, "c", LF
help_msg1:  .BYTE "dump", TAB, "d address", LF
help_msg2:  .BYTE "help", TAB, "h", LF
help_msg3:  .BYTE "run", TAB, "r", LF 
help_msg4:  .BYTE "write", TAB, "w address byte", LF
help_msg5:  .BYTE "ymodem", TAB, "y", LF, NUL


;= VARIABLES ===================================================================

.BSS

input:      .RES 10                 ; 9 characters plus NUL terminator
buf:        .RES 16                 ; memory buffer
